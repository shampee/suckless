!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARGBEGIN	arg.h	12;"	d
ARGC	arg.h	35;"	d
ARGEND	arg.h	32;"	d
ARGF	arg.h	43;"	d
ARG_H__	arg.h	7;"	d
BETWEEN	util.h	5;"	d
CC	config.mk	/^CC = gcc -O3 -pipe -std=c99 -fstack-protector-all -fpie$/;"	m
CFLAGS	config.mk	/^CFLAGS   = -std=c99 -pedantic -Wall -Os ${INCS} ${CPPFLAGS}$/;"	m
CPPFLAGS	config.mk	/^CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_XOPEN_SOURCE=700 -D_POSIX_C_SOURCE=200809L -DVERSION=\\"${VERSION}\\" ${XINERAMAFLAGS}$/;"	m
Clr	drw.h	/^typedef XftColor Clr;$/;"	t
ColBg	drw.h	/^enum { ColFg, ColBg }; \/* Clr scheme index *\/$/;"	e	enum:__anon3
ColFg	drw.h	/^enum { ColFg, ColBg }; \/* Clr scheme index *\/$/;"	e	enum:__anon3
Cur	drw.h	/^} Cur;$/;"	t	typeref:struct:__anon2
Drw	drw.h	/^} Drw;$/;"	t	typeref:struct:__anon4
EARGF	arg.h	37;"	d
FLAG	stest.c	14;"	d	file:
FREETYPEINC	config.mk	/^FREETYPEINC = \/usr\/include\/freetype2$/;"	m
FREETYPELIBS	config.mk	/^FREETYPELIBS = -lfontconfig -lXft$/;"	m
Fnt	drw.h	/^typedef struct Fnt {$/;"	s
Fnt	drw.h	/^} Fnt;$/;"	t	typeref:struct:Fnt
INCS	config.mk	/^INCS = -I${X11INC} -I${FREETYPEINC}$/;"	m
INTERSECT	dmenu.c	22;"	d	file:
LDFLAGS	config.mk	/^LDFLAGS  = -s ${LIBS}$/;"	m
LENGTH	dmenu.c	24;"	d	file:
LIBS	config.mk	/^LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS} -lm$/;"	m
MANPREFIX	config.mk	/^MANPREFIX = ${PREFIX}\/share\/man$/;"	m
MAX	util.h	3;"	d
MIN	util.h	4;"	d
OBJ	Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
PREFIX	config.mk	/^PREFIX = ${HOME}\/usr\/local$/;"	m
SRC	Makefile	/^SRC = drw.c dmenu.c stest.c util.c$/;"	m
SchemeLast	dmenu.c	/^enum { SchemeNorm, SchemeSel, SchemeOut, SchemeLast }; \/* color schemes *\/$/;"	e	enum:__anon1	file:
SchemeNorm	dmenu.c	/^enum { SchemeNorm, SchemeSel, SchemeOut, SchemeLast }; \/* color schemes *\/$/;"	e	enum:__anon1	file:
SchemeOut	dmenu.c	/^enum { SchemeNorm, SchemeSel, SchemeOut, SchemeLast }; \/* color schemes *\/$/;"	e	enum:__anon1	file:
SchemeSel	dmenu.c	/^enum { SchemeNorm, SchemeSel, SchemeOut, SchemeLast }; \/* color schemes *\/$/;"	e	enum:__anon1	file:
TEXTW	dmenu.c	25;"	d	file:
UTF_INVALID	drw.c	11;"	d	file:
UTF_SIZ	drw.c	12;"	d	file:
VERSION	config.mk	/^VERSION = 4.8$/;"	m
X11INC	config.mk	/^X11INC = \/usr\/X11R6\/include$/;"	m
X11LIB	config.mk	/^X11LIB = \/usr\/X11R6\/lib$/;"	m
XINERAMAFLAGS	config.mk	/^XINERAMAFLAGS = -DXINERAMA$/;"	m
XINERAMALIBS	config.mk	/^XINERAMALIBS  = -lXinerama$/;"	m
appenditem	dmenu.c	/^static void appenditem(struct item *item, struct item **list, struct item **last) {$/;"	f	file:
argv0	stest.c	/^char *argv0;$/;"	v
bh	dmenu.c	/^static int bh, mw, mh;$/;"	v	file:
calcoffsets	dmenu.c	/^static void calcoffsets(void) {$/;"	f	file:
cistrstr	dmenu.c	/^static char * cistrstr(const char *s, const char *sub) {$/;"	f	file:
cleanup	dmenu.c	/^static void cleanup(void) {$/;"	f	file:
clip	dmenu.c	/^static Atom clip, utf8;$/;"	v	file:
colors	config.h	/^static const char *colors[SchemeLast][2] = {$/;"	v
compare_distance	dmenu.c	/^int compare_distance(const void *a, const void *b) {$/;"	f
curr	dmenu.c	/^static struct item *prev, *curr, *next, *sel;$/;"	v	typeref:struct:	file:
cursor	dmenu.c	/^static size_t cursor;$/;"	v	file:
cursor	drw.h	/^	Cursor cursor;$/;"	m	struct:__anon2
die	util.c	/^die(const char *fmt, ...) {$/;"	f
distance	dmenu.c	/^	double distance;$/;"	m	struct:item	file:
dmw	dmenu.c	/^static unsigned int dmw = 0; \/* make dmenu this wide *\/$/;"	v	file:
dmx	dmenu.c	/^static int dmx = 0; \/* put dmenu at this x offset *\/$/;"	v	file:
dmy	dmenu.c	/^static int dmy = 0; \/* put dmenu at this y offset (measured from the bottom if topbar is 0) *\/$/;"	v	file:
dpy	dmenu.c	/^static Display *dpy;$/;"	v	file:
dpy	drw.h	/^	Display *dpy;$/;"	m	struct:Fnt
dpy	drw.h	/^	Display *dpy;$/;"	m	struct:__anon4
drawable	drw.h	/^	Drawable drawable;$/;"	m	struct:__anon4
drawitem	dmenu.c	/^static int drawitem(struct item *item, int x, int y, int w) {$/;"	f	file:
drawmenu	dmenu.c	/^static void drawmenu(void) {$/;"	f	file:
drw	dmenu.c	/^static Drw *drw;$/;"	v	file:
drw_clr_create	drw.c	/^drw_clr_create(Drw *drw, Clr *dest, const char *clrname)$/;"	f
drw_create	drw.c	/^drw_create(Display *dpy, int screen, Window root, unsigned int w, unsigned int h)$/;"	f
drw_cur_create	drw.c	/^drw_cur_create(Drw *drw, int shape)$/;"	f
drw_cur_free	drw.c	/^drw_cur_free(Drw *drw, Cur *cursor)$/;"	f
drw_font_getexts	drw.c	/^drw_font_getexts(Fnt *font, const char *text, unsigned int len, unsigned int *w, unsigned int *h)$/;"	f
drw_fontset_create	drw.c	/^drw_fontset_create(Drw* drw, const char *fonts[], size_t fontcount)$/;"	f
drw_fontset_free	drw.c	/^drw_fontset_free(Fnt *font)$/;"	f
drw_fontset_getwidth	drw.c	/^drw_fontset_getwidth(Drw *drw, const char *text)$/;"	f
drw_free	drw.c	/^drw_free(Drw *drw)$/;"	f
drw_map	drw.c	/^drw_map(Drw *drw, Window win, int x, int y, unsigned int w, unsigned int h)$/;"	f
drw_rect	drw.c	/^drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int invert)$/;"	f
drw_resize	drw.c	/^drw_resize(Drw *drw, unsigned int w, unsigned int h)$/;"	f
drw_scm_create	drw.c	/^drw_scm_create(Drw *drw, const char *clrnames[], size_t clrcount)$/;"	f
drw_setfontset	drw.c	/^drw_setfontset(Drw *drw, Fnt *set)$/;"	f
drw_setscheme	drw.c	/^drw_setscheme(Drw *drw, Clr *scm)$/;"	f
drw_text	drw.c	/^drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lpad, const char *text, int invert)$/;"	f
ecalloc	util.c	/^ecalloc(size_t nmemb, size_t size)$/;"	f
embed	dmenu.c	/^static char *embed;$/;"	v	file:
flag	stest.c	/^static int flag[26];$/;"	v	file:
fonts	config.h	/^static const char *fonts[] = {$/;"	v
fonts	drw.h	/^	Fnt *fonts;$/;"	m	struct:__anon4
fstrncmp	dmenu.c	/^static int (*fstrncmp)(const char *, const char *, size_t) = strncmp;$/;"	v	file:
fstrstr	dmenu.c	/^static char *(*fstrstr)(const char *, const char *) = strstr;$/;"	v	file:
fuzzy	config.h	/^static int fuzzy = 1; \/* -F  option; if 0, dmenu doesn't use fuzzy matching *\/$/;"	v
fuzzymatch	dmenu.c	/^void fuzzymatch(void) {$/;"	f
gc	drw.h	/^	GC gc;$/;"	m	struct:__anon4
grabfocus	dmenu.c	/^static void grabfocus(void) {$/;"	f	file:
grabkeyboard	dmenu.c	/^static void grabkeyboard(void) {$/;"	f	file:
h	drw.h	/^	unsigned int h;$/;"	m	struct:Fnt
h	drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon4
inputw	dmenu.c	/^static int inputw = 0, promptw;$/;"	v	file:
insert	dmenu.c	/^static void insert(const char *str, ssize_t n) {$/;"	f	file:
item	dmenu.c	/^struct item {$/;"	s	file:
items	dmenu.c	/^static struct item *items = NULL;$/;"	v	typeref:struct:item	file:
keypress	dmenu.c	/^static void keypress(XKeyEvent *ev) {$/;"	f	file:
left	dmenu.c	/^	struct item *left, *right;$/;"	m	struct:item	typeref:struct:item::item	file:
lines	config.h	/^static unsigned int lines = 0;$/;"	v
lrpad	dmenu.c	/^static int lrpad; \/* sum of left and right padding *\/$/;"	v	file:
main	dmenu.c	/^int main(int argc, char *argv[]) {$/;"	f
main	stest.c	/^main(int argc, char *argv[])$/;"	f
match	dmenu.c	/^static void match(void) {$/;"	f	file:
match	stest.c	/^static int match = 0;$/;"	v	file:
matchend	dmenu.c	/^static struct item *matches, *matchend;$/;"	v	typeref:struct:	file:
matches	dmenu.c	/^static struct item *matches, *matchend;$/;"	v	typeref:struct:item	file:
mh	dmenu.c	/^static int bh, mw, mh;$/;"	v	file:
mon	dmenu.c	/^static int mon = -1, screen;$/;"	v	file:
movewordedge	dmenu.c	/^static void movewordedge(int dir) {$/;"	f	file:
mw	dmenu.c	/^static int bh, mw, mh;$/;"	v	file:
new	stest.c	/^static struct stat old, new;$/;"	v	typeref:struct:	file:
next	dmenu.c	/^static struct item *prev, *curr, *next, *sel;$/;"	v	typeref:struct:	file:
next	drw.h	/^	struct Fnt *next;$/;"	m	struct:Fnt	typeref:struct:Fnt::Fnt
nextrune	dmenu.c	/^static size_t nextrune(int inc) {$/;"	f	file:
old	stest.c	/^static struct stat old, new;$/;"	v	typeref:struct:stat	file:
out	dmenu.c	/^	int out;$/;"	m	struct:item	file:
parentwin	dmenu.c	/^static Window root, parentwin, win;$/;"	v	file:
paste	dmenu.c	/^static void paste(void) {$/;"	f	file:
pattern	drw.h	/^	FcPattern *pattern;$/;"	m	struct:Fnt
prev	dmenu.c	/^static struct item *prev, *curr, *next, *sel;$/;"	v	typeref:struct:item	file:
prompt	config.h	/^static const char *prompt = NULL;      \/* -p  option; prompt to the left of input field *\/$/;"	v
promptw	dmenu.c	/^static int inputw = 0, promptw;$/;"	v	file:
readstdin	dmenu.c	/^static void readstdin(void) {$/;"	f	file:
right	dmenu.c	/^	struct item *left, *right;$/;"	m	struct:item	typeref:struct:item::	file:
root	dmenu.c	/^static Window root, parentwin, win;$/;"	v	file:
root	drw.h	/^	Window root;$/;"	m	struct:__anon4
run	dmenu.c	/^static void run(void) {$/;"	f	file:
scheme	dmenu.c	/^static Clr *scheme[SchemeLast];$/;"	v	file:
scheme	drw.h	/^	Clr *scheme;$/;"	m	struct:__anon4
screen	dmenu.c	/^static int mon = -1, screen;$/;"	v	file:
screen	drw.h	/^	int screen;$/;"	m	struct:__anon4
sel	dmenu.c	/^static struct item *prev, *curr, *next, *sel;$/;"	v	typeref:struct:	file:
setup	dmenu.c	/^static void setup(void) {$/;"	f	file:
test	stest.c	/^test(const char *path, const char *name)$/;"	f	file:
text	dmenu.c	/^	char *text;$/;"	m	struct:item	file:
text	dmenu.c	/^static char text[BUFSIZ] = "";$/;"	v	file:
topbar	config.h	/^static int topbar = 0;  \/* -b  option; if 0, dmenu appears at bottom     *\/$/;"	v
usage	dmenu.c	/^static void usage(void) {$/;"	f	file:
usage	stest.c	/^usage(void)$/;"	f	file:
utf8	dmenu.c	/^static Atom clip, utf8;$/;"	v	file:
utf8decode	drw.c	/^utf8decode(const char *c, long *u, size_t clen)$/;"	f	file:
utf8decodebyte	drw.c	/^utf8decodebyte(const char c, size_t *i)$/;"	f	file:
utf8validate	drw.c	/^utf8validate(long *u, size_t i)$/;"	f	file:
utfbyte	drw.c	/^static const unsigned char utfbyte[UTF_SIZ + 1] = {0x80,    0, 0xC0, 0xE0, 0xF0};$/;"	v	file:
utfmask	drw.c	/^static const unsigned char utfmask[UTF_SIZ + 1] = {0xC0, 0x80, 0xE0, 0xF0, 0xF8};$/;"	v	file:
utfmax	drw.c	/^static const long utfmax[UTF_SIZ + 1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};$/;"	v	file:
utfmin	drw.c	/^static const long utfmin[UTF_SIZ + 1] = {       0,    0,  0x80,  0x800,  0x10000};$/;"	v	file:
w	drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon4
win	dmenu.c	/^static Window root, parentwin, win;$/;"	v	file:
worddelimiters	config.h	/^static const char worddelimiters[] = " \/?\\"&[].:,";$/;"	v
xfont	drw.h	/^	XftFont *xfont;$/;"	m	struct:Fnt
xfont_create	drw.c	/^xfont_create(Drw *drw, const char *fontname, FcPattern *fontpattern)$/;"	f	file:
xfont_free	drw.c	/^xfont_free(Fnt *font)$/;"	f	file:
xic	dmenu.c	/^static XIC xic;$/;"	v	file:
